apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "peering-manager.fullname" . }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
{{ include "peering-manager.labels" . | indent 4 }}
data:
  configuration.py: |
    import re
    import yaml

    from pathlib import Path

    def _deep_merge(source, destination):
      """Inspired by https://stackoverflow.com/a/20666342"""
      for key, value in source.items():
        dst_value = destination.get(key)

        if isinstance(value, dict) and isinstance(dst_value, dict):
          _deep_merge(value, dst_value)
        else:
          destination[key] = value

      return destination

    def _load_yaml():
      extraConfigBase = Path('/run/config/extra')
      configFiles = [Path('/run/config/peering-manager/peering-manager.yaml')]

      configFiles.extend(sorted(extraConfigBase.glob('*/*.yaml')))

      for configFile in configFiles:
        with open(configFile, 'r') as f:
          config = yaml.safe_load(f)

        _deep_merge(config, globals())

    def _load_secret(name, key):
      path = "/run/secrets/{name}/{key}".format(name=name, key=key)
      with open(path, 'r') as f:
        return f.read()

    _load_yaml()

    DATABASE['PASSWORD'] = _load_secret('peering-manager', 'db_password')
    EMAIL['PASSWORD'] = _load_secret('peering-manager', 'email_password')
    NAPALM_PASSWORD = _load_secret('peering-manager', 'napalm_password')
    NETBOX_API_TOKEN = _load_secret('peering-manager', 'netbox_api_token')
    PEERINGDB_API_KEY = _load_secret('peering-manager', 'peeringdb_api_key')
    PEERINGDB_PASSWORD = _load_secret('peering-manager', 'peeringdb_password')
    REDIS['tasks']['PASSWORD'] = _load_secret('peering-manager', 'redis_tasks_password')
    REDIS['caching']['PASSWORD'] = _load_secret('peering-manager', 'redis_cache_password')
    SECRET_KEY = _load_secret('peering-manager', 'secret_key')

    # Post-process certain values
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r
                                   in CORS_ORIGIN_REGEX_WHITELIST]
    {{- if and (not .Values.redis.enabled) .Values.tasksRedis.sentinels }}
    REDIS['tasks']['SENTINELS'] = [tuple(x.split(r":")) for x
                                   in REDIS['tasks']['SENTINELS']]
    {{- end }}
    {{- if and (not .Values.redis.enabled) .Values.cachingRedis.sentinels }}
    REDIS['caching']['SENTINELS'] = [tuple(x.split(r":")) for x
                                     in REDIS['caching']['SENTINELS']]
    {{- end }}

  peering-manager.yaml: |
    ALLOWED_HOSTS: {{ toJson .Values.allowedHosts }}

    DATABASE:
      {{ if .Values.postgresql.enabled -}}
      HOST: {{ include "postgresql.primary.fullname" .Subcharts.postgresql | quote }}
      USER: {{ include "postgresql.username" .Subcharts.postgresql | quote }}
      NAME: {{ include "postgresql.database" .Subcharts.postgresql | quote }}
      PORT: {{ include "postgresql.service.port" .Subcharts.postgresql | int }}
      {{- else -}}
      HOST: {{ .Values.externalDatabase.host | quote }}
      USER: {{ .Values.externalDatabase.username | quote }}
      NAME: {{ .Values.externalDatabase.database | quote }}
      PORT: {{ .Values.externalDatabase.port | int }}
      {{- end }}
      OPTIONS:
        sslmode: {{ .Values.externalDatabase.sslMode | quote }}
        target_session_attrs: {{ .Values.externalDatabase.targetSessionAttrs | default "read-write" | quote }}
      CONN_MAX_AGE: {{ .Values.externalDatabase.connMaxAge | int }}
      DISABLE_SERVER_SIDE_CURSORS: {{ toJson .Values.externalDatabase.disableServerSideCursors }}

    AUTH_PASSWORD_VALIDATORS: {{ toJson .Values.authPasswordValidators }}
    BANNER_LOGIN: {{ .Values.banner.login | quote }}
    BASE_PATH: {{ .Values.basePath | quote }}
    CHANGELOG_RETENTION: {{ int .Values.changelogRetention }}
    CORS_ORIGIN_ALLOW_ALL: {{ toJson .Values.cors.originAllowAll }}
    CORS_ORIGIN_WHITELIST: {{ toJson .Values.cors.originWhitelist }}
    CORS_ORIGIN_REGEX_WHITELIST: {{ toJson .Values.cors.originRegexWhitelist }}
    CSRF_TRUSTED_ORIGINS: {{ toJson .Values.csrf.trustedOrigins }}
    DEBUG: {{ toJson .Values.debug }}

    EMAIL:
      SERVER: {{ .Values.email.server | quote }}
      PORT: {{ .Values.email.port | int }}
      USERNAME: {{ .Values.email.username | quote }}
      USE_SSL: {{ toJson .Values.email.useSSL }}
      USE_TLS: {{ toJson .Values.email.useTLS }}
      SSL_CERTFILE: {{ .Values.email.sslCertFile | quote }}
      SSL_KEYFILE: {{ .Values.email.sslKeyFile | quote }}
      TIMEOUT: {{ .Values.email.timeout | int }}
      FROM_EMAIL: {{ toJson .Values.email.from }}

    HTTP_PROXIES: {{ toJson .Values.httpProxies }}
    INTERNAL_IPS: {{ toJson .Values.internalIPs }}
    JOBRESULT_RETENTION: {{ int .Values.jobResultRetention }}
    LOGGING: {{ toJson .Values.logging }}
    LOGIN_REQUIRED: {{ toJson .Values.loginRequired }}
    METRICS_ENABLED: {{ toJson .Values.metricsEnabled }}
    NETBOX_API: {{ toJson .Values.netbox.api.url }}
    NETBOX_API_THREADING: {{ toJson .Values.netbox.api.threading }}
    NETBOX_API_VERIFY_SSL: {{ toJson .Values.netbox.api.verifySSL }}
    NETBOX_DEVICE_ROLES: {{ toJson .Values.netbox.deviceRoles }}
    NETBOX_TAGS: {{ toJson .Values.netbox.tags }}
    PAGINATE_COUNT: {{ int .Values.paginateCount }}
    PEERINGDB_USERNAME: {{ toJson .Values.peeringdb.username | quote }}
    RELEASE_CHECK_URL: {{ toJson .Values.releaseCheck.url }}

    REDIS:
      tasks:
        {{- if .Values.redis.enabled }}
        HOST: {{ printf "%s-master" (include "common.names.fullname" .Subcharts.redis) | quote }}
        PORT: {{ .Values.redis.master.service.ports.redis | int }}
        {{- else if .Values.tasksRedis.sentinels }}
        SENTINELS: {{ toJson .Values.tasksRedis.sentinels }}
        SENTINEL_SERVICE: {{ .Values.tasksRedis.sentinelService | quote }}
        SENTINEL_TIMEOUT: {{ .Values.tasksRedis.sentinelTimeout | int }}
        {{- else }}
        HOST: {{ .Values.tasksRedis.host | quote }}
        PORT: {{ .Values.tasksRedis.port | int}}
        {{- end }}
        USERNAME: {{ .Values.tasksRedis.username | quote }}
        DATABASE: {{ int .Values.tasksRedis.database }}
        SSL: {{ toJson .Values.tasksRedis.ssl }}
        INSECURE_SKIP_TLS_VERIFY: {{ toJson .Values.tasksRedis.insecureSkipTlsVerify }}
        CA_CERT_PATH: {{ .Values.tasksRedis.caCertPath | quote }}
      caching:
        {{- if .Values.redis.enabled }}
        HOST: {{ printf "%s-master" (include "common.names.fullname" .Subcharts.redis) | quote }}
        PORT: {{ .Values.redis.master.service.ports.redis | int }}
        {{- else if .Values.cachingRedis.sentinels }}
        SENTINELS: {{ toJson .Values.cachingRedis.sentinels }}
        SENTINEL_SERVICE: {{ .Values.cachingRedis.sentinelService | quote }}
        SENTINEL_TIMEOUT: {{ .Values.cachingRedis.sentinelTimeout | int }}
        {{- else }}
        HOST: {{ .Values.cachingRedis.host | quote }}
        PORT: {{ .Values.cachingRedis.port | int}}
        {{- end }}
        USERNAME: {{ .Values.cachingRedis.username | quote }}
        DATABASE: {{ int .Values.cachingRedis.database }}
        SSL: {{ toJson .Values.cachingRedis.ssl }}
        INSECURE_SKIP_TLS_VERIFY: {{ toJson .Values.cachingRedis.insecureSkipTlsVerify }}
        CA_CERT_PATH: {{ .Values.cachingRedis.caCertPath | quote }}

    RQ_DEFAULT_TIMEOUT: {{ .Values.rqDefaultTimeout | int }}
    CSRF_COOKIE_NAME: {{ .Values.csrf.cookieName | quote }}
    TIME_ZONE: {{ .Values.timeZone | quote }}
    DATE_FORMAT: {{ .Values.dateFormat | quote }}
    SHORT_DATE_FORMAT: {{ .Values.shortDateFormat | quote }}
    TIME_FORMAT: {{ .Values.timeFormat | quote }}
    SHORT_TIME_FORMAT: {{ .Values.shortTimeFormat | quote }}
    DATETIME_FORMAT: {{ .Values.dateTimeFormat | quote }}
    SHORT_DATETIME_FORMAT: {{ .Values.shortDateTimeFormat | quote }}

  {{ range $index, $config := .Values.extraConfig -}}
  {{- if $config.values }}
  extra-{{ $index }}.yaml: |
    {{- toYaml $config.values | nindent 4 }}
  {{- end }}
  {{ end -}}
