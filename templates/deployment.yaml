apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "peering-manager.fullname" . }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "peering-manager.labels" . | nindent 4 }}
    app.kubernetes.io/component: peering-manager
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "peering-manager.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: peering-manager
  {{ if .Values.updateStrategy -}}
  strategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{ end -}}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if (not .Values.existingSecret) }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "peering-manager.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: peering-manager
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "peering-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-dirs
          image: "{{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}"
          imagePullPolicy: {{ .Values.init.image.pullPolicy }}
          command: [/bin/sh, -c, mkdir -p /opt/unit/state /opt/unit/tmp]
          {{- if .Values.init.resources }}
          resources:
            {{- toYaml .Values.init.resources | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.init.securityContext | nindent 12 }}
          volumeMounts:
            - name: optunit
              mountPath: /opt/unit
        {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SUPERUSER_NAME
              value: {{ .Values.superuser.name | quote }}
            - name: SUPERUSER_EMAIL
              value: {{ .Values.superuser.email | quote }}
            - name: SKIP_STARTUP_SCRIPTS
              value: {{ .Values.skipStartupScripts | quote }}
            {{- with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /{{ .Values.basePath }}login/
              port: http
              {{- if (not (eq (index .Values.allowedHosts 0) "*")) }}
              httpHeaders:
                - name: Host
                  value: {{ (index .Values.allowedHosts 0) | quote }}
              {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/peering-manager/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/peering-manager
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/peering-manager
              readOnly: true
            {{- include "peering-manager.extraConfig.volumeMounts" . | nindent 12 -}}
            - name: peering-manager-tmp
              mountPath: /tmp
            - name: optunit
              mountPath: /opt/unit
            - name: secrets
              mountPath: /run/secrets/superuser_password
              subPath: superuser_password
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/superuser_api_token
              subPath: superuser_api_token
              readOnly: true
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "peering-manager.fullname" . }}
        - name: secrets
          projected:
            sources:
              - secret:
                  name: {{ .Values.existingSecret | default (include "peering-manager.fullname" .) | quote }}
                  items:
                    # Used by peering-manager-docker entry scripts
                    - key: superuser_password
                      path: superuser_password
                    - key: superuser_api_token
                      path: superuser_api_token
                    # Used by our configuration
                    - key: email_password
                      path: email_password
                    - key: napalm_password
                      path: napalm_password
                    - key: netbox_api_token
                      path: netbox_api_token
                    - key: peeringdb_api_key
                      path: peeringdb_api_key
                    - key: peeringdb_password
                      path: peeringdb_password
                    - key: secret_key
                      path: secret_key
              - secret:
                  name: {{ include "peering-manager.postgresql.secret" . | quote }}
                  items:
                    - key: {{ include "peering-manager.postgresql.secretKey" . | quote }}
                      path: db_password
              - secret:
                  name: {{ include "peering-manager.tasksRedis.secret" . | quote }}
                  items:
                    - key: {{ include "peering-manager.tasksRedis.secretKey" . | quote }}
                      path: redis_tasks_password
              - secret:
                  name: {{ include "peering-manager.cachingRedis.secret" . | quote }}
                  items:
                    - key: {{ include "peering-manager.cachingRedis.secretKey" . | quote }}
                      path: redis_cache_password
        {{- include "peering-manager.extraConfig.volumes" . | nindent 8 -}}
        - name: peering-manager-tmp
          emptyDir:
            medium: Memory
        - name: optunit
          emptyDir:
            medium: Memory
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}